diff -crB dalvik/libcore/luni/src/main/java/java/io/FileDescriptor.java dalvik1/libcore/luni/src/main/java/java/io/FileDescriptor.java
*** dalvik/libcore/luni/src/main/java/java/io/FileDescriptor.java	2011-06-05 05:50:50.082570000 -0700
--- dalvik1/libcore/luni/src/main/java/java/io/FileDescriptor.java	2011-06-07 03:19:48.622457000 -0700
***************
*** 114,119 ****
--- 114,121 ----
       */
      public boolean hasName = false;
  
+     public int port = 0;
+ 
      /**
       * hack for printing out IP address
       * @hide
diff -crB dalvik/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java dalvik1/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java
*** dalvik/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java	2011-06-05 05:50:50.082570000 -0700
--- dalvik1/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java	2011-06-10 06:16:20.933605000 -0700
***************
*** 116,123 ****
      public int connect(FileDescriptor fd, int trafficClass,
              InetAddress inetAddress, int port) throws IOException{
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
--- 116,124 ----
      public int connect(FileDescriptor fd, int trafficClass,
              InetAddress inetAddress, int port) throws IOException{
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+             fd.port = port;
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
***************
*** 131,138 ****
      public void connectDatagram(FileDescriptor fd, int port,
              int trafficClass, InetAddress inetAddress) throws SocketException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
--- 132,140 ----
      public void connectDatagram(FileDescriptor fd, int port,
              int trafficClass, InetAddress inetAddress) throws SocketException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+ 	    fd.port = port;
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
***************
*** 147,154 ****
              int aport, int timeout, int trafficClass, InetAddress inetAddress)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    aFD.hasName = true;
  	    aFD.name = addr;
  	}
--- 149,157 ----
              int aport, int timeout, int trafficClass, InetAddress inetAddress)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+ 	    //fd.port = port;
  	    aFD.hasName = true;
  	    aFD.name = addr;
  	}
***************
*** 167,174 ****
              int trafficClass, InetAddress inetAddress, int port, int step,
              byte[] context) throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
--- 170,178 ----
              int trafficClass, InetAddress inetAddress, int port, int step,
              byte[] context) throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+ 	    fd.port = port;
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
***************
*** 408,414 ****
       */
      public int read(FileDescriptor fd, byte[] data, int offset, int count,
              int timeout) throws IOException {
!         return readSocketImpl(fd, data, offset, count, timeout);
      }
  
      static native int readSocketImpl(FileDescriptor aFD, byte[] data,
--- 412,423 ----
       */
      public int read(FileDescriptor fd, byte[] data, int offset, int count,
              int timeout) throws IOException {
! 	int bytesRead = readSocketImpl(fd, data, offset, count, timeout);
! 	if (bytesRead > 0) {
! 	    String dstr = new String(data, offset, count);
! 	    Taint.log("OSNetworkSystem.read(). Response=["+dstr+"] from " + fd.name + ":" + fd.port);
! 	}
!         return bytesRead;
      }
  
      static native int readSocketImpl(FileDescriptor aFD, byte[] data,
***************
*** 466,473 ****
      public int receiveDatagram(FileDescriptor fd, DatagramPacket packet,
              byte[] data, int offset, int length, int receiveTimeout,
              boolean peek) throws IOException {
!         return receiveDatagramImpl(fd, packet, data, offset, length,
                  receiveTimeout, peek);
      }
  
      static native int receiveDatagramImpl(FileDescriptor aFD,
--- 475,488 ----
      public int receiveDatagram(FileDescriptor fd, DatagramPacket packet,
              byte[] data, int offset, int length, int receiveTimeout,
              boolean peek) throws IOException {
! 
! 	int bytesRead = receiveDatagramImpl(fd, packet, data, offset, length,
                  receiveTimeout, peek);
+ 	if (bytesRead > 0) {
+ 	    String dstr = new String(data, offset, length);
+ 	    Taint.log("OSNetworkSystem.receiveDatagram(). Response=["+dstr+"] from " + fd.name + ":" + fd.port);
+ 	}
+         return bytesRead;
      }
  
      static native int receiveDatagramImpl(FileDescriptor aFD,
***************
*** 507,513 ****
       */
      public int receiveStream(FileDescriptor aFD, byte[] data,
              int offset, int count, int timeout) throws IOException {
!         return receiveStreamImpl(aFD, data, offset, count, timeout);
      }
  
      static native int receiveStreamImpl(FileDescriptor aFD, byte[] data,
--- 522,534 ----
       */
      public int receiveStream(FileDescriptor aFD, byte[] data,
              int offset, int count, int timeout) throws IOException {
! 
! 	int bytesRead = receiveStreamImpl(aFD, data, offset, count, timeout);
! 	if (bytesRead > 0) {
! 	    String dstr = new String(data, offset, count);
!             Taint.log("OSNetworkSystem.receiveStream(). Response=["+dstr+"] from " + aFD.name + ":" + aFD.port);
!         }
!         return bytesRead;
      }
  
      static native int receiveStreamImpl(FileDescriptor aFD, byte[] data,
***************
*** 530,539 ****
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(data);
! 	    String addr = (fd.hasName) ? fd.name : "unknown";
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendStream("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return sendStreamImpl(fd, data, offset, count);
--- 551,561 ----
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 		String dstr = new String(data, offset, count);
! 		String addr = (fd.hasName) ? fd.name : "unknown";
! 		int port = (fd.hasName) ? fd.port : 0;
! 		String tstr = "0x" + Integer.toHexString(tag);
! 		Taint.log("OSNetworkSystem.sendStream("+addr+":"+port+") sending data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return sendStreamImpl(fd, data, offset, count);
***************
*** 663,674 ****
              int offset, int length, boolean bindToDevice) throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
! 	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(data);
! 	    String addr = (fd.hasName) ? fd.name : "unknown";
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendConnectedDatagram("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
! 	}
  	// end WITH_TAINT_TRACKING
          return sendConnectedDatagramImpl(fd, data, offset, length, bindToDevice);
      }
--- 685,698 ----
              int offset, int length, boolean bindToDevice) throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
!         String dstr = new String(data);
!         String addr = (fd.hasName) ? fd.name : "unknown";
! 	int port = (fd.hasName) ? fd.port : 0;
! 	String tstr = "0x" + Integer.toHexString(tag);
! 	if (tag != Taint.TAINT_CLEAR)
! 	    Taint.log("OSNetworkSystem.sendStream("+addr+":"+port+") sending data with tag " + tstr + " data=["+dstr+"]");
! 	else
! 	    Taint.log("OSNetworkSystem.sendStream("+addr+":"+port+") data=["+dstr+"]");
  	// end WITH_TAINT_TRACKING
          return sendConnectedDatagramImpl(fd, data, offset, length, bindToDevice);
      }
***************
*** 722,731 ****
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(data);
! 	    String addr = (fd.hasName) ? fd.name : "unknown";
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendDatagram("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl(fd, data, offset, length, port, bindToDevice,
--- 746,756 ----
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 		String dstr = new String(data);
! 		String addr = (fd.hasName) ? fd.name : "unknown";
! 		int por = (fd.hasName) ? fd.port : 0;
! 		String tstr = "0x" + Integer.toHexString(tag);
! 		Taint.log("OSNetworkSystem.sendStream("+addr+":"+por+") sending data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl(fd, data, offset, length, port, bindToDevice,
***************
*** 741,750 ****
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(data);
! 	    String addr = (fd.hasName) ? fd.name : "unknown";
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendDatagram2("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl2(fd, data, offset, length, port, inetAddress);
--- 766,776 ----
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 		String dstr = new String(data);
! 		String addr = (fd.hasName) ? fd.name : "unknown";
! 		int por = (fd.hasName) ? fd.port : 0;
! 		String tstr = "0x" + Integer.toHexString(tag);
! 		Taint.log("OSNetworkSystem.sendStream("+addr+":"+por+") sending data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl2(fd, data, offset, length, port, inetAddress);
***************
*** 770,783 ****
              int trafficClass, InetAddress inetAddress) throws IOException;
  
      public void sendUrgentData(FileDescriptor fd, byte value) {
- 	// begin WITH_TAINT_TRACKING
- 	int tag = Taint.getTaintByte(value);
- 	String addr = (fd.hasName) ? fd.name : "unknown";
- 	if (tag != Taint.TAINT_CLEAR) {
- 	    String tstr = "0x" + Integer.toHexString(tag);
- 	    Taint.log("OSNetworkSystem.sendUrgentData("+addr+") received data with tag " + tstr + " value=["+value+"]");
- 	}
- 	// end WITH_TAINT_TRACKING
          sendUrgentDataImpl(fd, value);
      }
  
--- 796,801 ----
***************
*** 891,897 ****
  	    String dstr = new String(data);
  	    String addr = (fd.hasName) ? fd.name : "unknown";
  	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.write("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return writeSocketImpl(fd, data, offset, count);
--- 909,915 ----
  	    String dstr = new String(data);
  	    String addr = (fd.hasName) ? fd.name : "unknown";
  	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.write("+addr+") writing data with tag " + tstr + " data=["+dstr+"]");
  	}
  	// end WITH_TAINT_TRACKING
          return writeSocketImpl(fd, data, offset, count);
diff -crB dalvik/libcore/security/src/main/java/java/security/MessageDigest.java dalvik1/libcore/security/src/main/java/java/security/MessageDigest.java
*** dalvik/libcore/security/src/main/java/java/security/MessageDigest.java	2011-06-05 05:38:28.464405000 -0700
--- dalvik1/libcore/security/src/main/java/java/security/MessageDigest.java	2011-04-06 09:07:32.191513000 -0700
***************
*** 23,29 ****
  package java.security;
  
  import java.nio.ByteBuffer;
! 
  import org.apache.harmony.security.fortress.Engine;
  import org.apache.harmony.security.internal.nls.Messages;
  
--- 23,29 ----
  package java.security;
  
  import java.nio.ByteBuffer;
! import dalvik.system.Taint;
  import org.apache.harmony.security.fortress.Engine;
  import org.apache.harmony.security.internal.nls.Messages;
  
***************
*** 87,96 ****
--- 87,98 ----
                  result = (MessageDigest) engine.spi;
                  result.algorithm = algorithm;
                  result.provider = engine.provider;
+                 Taint.log("About to hash something with " + algorithm);
                  return result;
              } else {
                  result = new MessageDigestImpl((MessageDigestSpi) engine.spi,
                          engine.provider, algorithm);
+ 		Taint.log("About to hash something with " + algorithm);
                  return result;
              }
          }
***************
*** 227,232 ****
--- 229,238 ----
          if (input == null) {
              throw new NullPointerException(Messages.getString("security.06")); //$NON-NLS-1$
          }
+ 	int tag = Taint.getTaintByteArray(input);
+ 	if (tag != Taint.TAINT_CLEAR) {
+ 	    Taint.log("Hash " + new String(input));
+ 	}
          engineUpdate(input, 0, input.length);
      }
  
***************
*** 239,245 ****
       * @since Android 1.0
       */
      public byte[] digest() {
!         return engineDigest();
      }
  
      /**
--- 245,255 ----
       * @since Android 1.0
       */
      public byte[] digest() {
! 	byte[] data = engineDigest();
! 	//begin WITH_TAINT_TRACKING
! 	Taint.addTaintString(new String(data), Taint.TAINT_IMEI);
! 	//end WITH_TAINT_TRACKING
!         return data;
      }
  
      /**
