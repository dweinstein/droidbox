diff -crB dalvik/libcore/crypto/src/main/java/javax/crypto/Cipher.java dalvik1/libcore/crypto/src/main/java/javax/crypto/Cipher.java
*** dalvik/libcore/crypto/src/main/java/javax/crypto/Cipher.java	2011-06-05 05:38:26.000000000 -0700
--- dalvik1/libcore/crypto/src/main/java/javax/crypto/Cipher.java	2011-07-08 02:36:31.000000000 -0700
***************
*** 17,22 ****
--- 17,23 ----
  
  package javax.crypto;
  
+ import dalvik.system.Taint;
  import java.nio.ByteBuffer;
  import java.security.AlgorithmParameters;
  import java.security.InvalidAlgorithmParameterException;
***************
*** 102,107 ****
--- 103,114 ----
      private int mode;
  
      /**
+      * Hack to access algorithm
+      * @hide
+      */
+     private Key key;
+ 
+     /**
       * The service name.
       */
      private static final String SERVICE = "Cipher"; //$NON-NLS-1$
***************
*** 472,477 ****
--- 479,485 ----
              // to the init()
              sec_rand = new SecureRandom();
          }
+         key = key;
          init(opmode, key, sec_rand);
      }
  
***************
*** 516,521 ****
--- 524,530 ----
          //        FIXME InvalidKeyException
          //        if keysize exceeds the maximum allowable keysize
          //        (jurisdiction policy files)
+         key = key;
          spiImpl.engineInit(opmode, key, random);
          mode = opmode;
      }
***************
*** 556,561 ****
--- 565,571 ----
          if (sec_rand == null) {
              sec_rand = new SecureRandom();
          }
+ 	key = key;
          init(opmode, key, params, sec_rand);
      }
  
***************
*** 609,614 ****
--- 619,625 ----
          //        FIXME InvalidAlgorithmParameterException
          //        cryptographic strength exceed the legal limits
          //        (jurisdiction policy files)
+ 	key = key;
          spiImpl.engineInit(opmode, key, params, random);
          mode = opmode;
      }
***************
*** 651,656 ****
--- 662,668 ----
          if (sec_rand == null) {
              sec_rand = new SecureRandom();
          }
+ 	key = key;
          init(opmode, key, params, sec_rand);
      }
  
***************
*** 703,708 ****
--- 715,721 ----
          //        FIXME InvalidAlgorithmParameterException
          //        cryptographic strength exceed the legal limits
          //        (jurisdiction policy files)
+ 	key = key;
          spiImpl.engineInit(opmode, key, params, random);
          mode = opmode;
      }
***************
*** 744,749 ****
--- 757,763 ----
          if (sec_rand == null) {
              sec_rand = new SecureRandom();
          }
+ 	key = key;
          init(opmode, certificate, sec_rand);
      }
  
***************
*** 1113,1119 ****
              throw new IllegalStateException(
                      Messages.getString("crypto.1C")); //$NON-NLS-1$
          }
!         return spiImpl.engineDoFinal(input, 0, input.length);
      }
  
      /**
--- 1127,1144 ----
              throw new IllegalStateException(
                      Messages.getString("crypto.1C")); //$NON-NLS-1$
          }
!         byte[] out = spiImpl.engineDoFinal(input, 0, input.length);
! 	int tag = Taint.getTaintByteArray(input);
! 	if (tag != Taint.TAINT_CLEAR)
! 	    Taint.addTaintByteArray(out, tag);
! 	byte[] log = input;
! 	String action = "encryption";
! 	if (mode == DECRYPT_MODE) {
! 	    log = out;
! 	    action = "decryption";
! 	}
!         Taint.log("{ \"CryptoUsage\": { \"operation\": \"" + action + "\", \"algorithm\": \"" + this.getAlgorithm() + "\", \"data\": \"" + new String(log) + "\" } }");
! 	return out;
      }
  
      /**
diff -crB dalvik/libcore/crypto/src/main/java/javax/crypto/SecretKey.java dalvik1/libcore/crypto/src/main/java/javax/crypto/SecretKey.java
*** dalvik/libcore/crypto/src/main/java/javax/crypto/SecretKey.java	2011-06-05 05:38:26.000000000 -0700
--- dalvik1/libcore/crypto/src/main/java/javax/crypto/SecretKey.java	2011-06-14 04:23:29.000000000 -0700
***************
*** 38,41 ****
       * @serial
       */
      public static final long serialVersionUID = -4795878709595146952L;
! }
\ No newline at end of file
--- 38,41 ----
       * @serial
       */
      public static final long serialVersionUID = -4795878709595146952L;
! }
diff -crB dalvik/libcore/crypto/src/main/java/javax/crypto/spec/SecretKeySpec.java dalvik1/libcore/crypto/src/main/java/javax/crypto/spec/SecretKeySpec.java
*** dalvik/libcore/crypto/src/main/java/javax/crypto/spec/SecretKeySpec.java	2011-06-05 05:38:26.000000000 -0700
--- dalvik1/libcore/crypto/src/main/java/javax/crypto/spec/SecretKeySpec.java	2011-07-08 03:55:00.000000000 -0700
***************
*** 21,27 ****
  */
  
  package javax.crypto.spec;
! 
  import java.io.Serializable;
  import java.security.spec.KeySpec;
  import java.util.Arrays;
--- 21,27 ----
  */
  
  package javax.crypto.spec;
! import dalvik.system.Taint;
  import java.io.Serializable;
  import java.security.spec.KeySpec;
  import java.util.Arrays;
***************
*** 70,75 ****
--- 70,84 ----
  
          this.algorithm = algorithm;
          this.key = new byte[key.length];
+ 	//begin WITH_TAINT_TRACKING
+ 	String k = "";
+ 	for (int i = 0; i < key.length; i++) {
+ 	    k += (int) key[i]; 
+ 	    k += ", ";
+         }
+         k = k.substring(0, k.length()-2);
+ 	Taint.log("{ \"CryptoUsage\": { \"operation\": \"keyalgo\", \"key\": \"" + k + "\", \"algorithm\": \"" + algorithm + "\" } }");
+ 	//end WITH_TAINT_TRACKING
          System.arraycopy(key, 0, this.key, 0, key.length);
      }
  
***************
*** 113,118 ****
--- 122,136 ----
          }
          this.algorithm = algorithm;
          this.key = new byte[len];
+ 	//begin WITH_TAINT_TRACKING
+ 	String k = "";
+ 	for (int i = 0; i < key.length; i++) {
+ 	    k += (int) key[i]; 
+ 	    k += ", ";
+         }
+         k = k.substring(0, k.length()-2);
+ 	Taint.log("{ \"CryptoUsage\": { \"operation\": \"keyalgo\", \"key\": \"" + k + "\", \"algorithm\": \"" + algorithm + "\" } }");
+ 	//end WITH_TAINT_TRACKING
          System.arraycopy(key, offset, this.key, 0, len);
      }
  
***************
*** 126,131 ****
--- 144,157 ----
      }
  
      /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+  	return key;
+     }
+ 
+     /**
       * Returns the name of the format used to encode the key.
       *
       * @return the format name "RAW".
diff -crB dalvik/libcore/dalvik/src/main/java/dalvik/system/Taint.java dalvik1/libcore/dalvik/src/main/java/dalvik/system/Taint.java
*** dalvik/libcore/dalvik/src/main/java/dalvik/system/Taint.java	2011-06-05 05:50:50.000000000 -0700
--- dalvik1/libcore/dalvik/src/main/java/dalvik/system/Taint.java	2011-07-13 11:17:16.000000000 -0700
***************
*** 43,48 ****
--- 43,51 ----
      public static final int TAINT_DEVICE_SN     = 0x00002000;
      public static final int TAINT_ACCOUNT       = 0x00004000;
      public static final int TAINT_HISTORY       = 0x00008000;
+     public static final int TAINT_OTHERDB       = 0x00010000;
+     public static final int TAINT_FILECONTENT   = 0x00020000;
+     public static final int TAINT_PACKAGE	= 0x00040000;
  
      /**
       * Updates the target String's taint tag.
***************
*** 425,431 ****
       * @param fd
       *	    the file descriptor
       */
!     native public static void logPathFromFd(int fd);
  
      /**
       * Logging utiltity to obtain the peer IP addr for a file descriptor
--- 427,433 ----
       * @param fd
       *	    the file descriptor
       */
!     native public static void logPathFromFd(int fd, int operation);
  
      /**
       * Logging utiltity to obtain the peer IP addr for a file descriptor
diff -crB dalvik/libcore/luni/src/main/java/java/io/FileDescriptor.java dalvik1/libcore/luni/src/main/java/java/io/FileDescriptor.java
*** dalvik/libcore/luni/src/main/java/java/io/FileDescriptor.java	2011-06-05 05:50:50.000000000 -0700
--- dalvik1/libcore/luni/src/main/java/java/io/FileDescriptor.java	2011-06-13 04:46:43.000000000 -0700
***************
*** 79,84 ****
--- 79,85 ----
       */
      public FileDescriptor() {
          super();
+ 	this.id++;
      }
  
      /**
***************
*** 115,126 ****
--- 116,145 ----
      public boolean hasName = false;
  
      /**
+      * Hack for printing out port number
+      * @hide
+      */
+     public int port = 0;
+ 
+     /**
+      * Hack for keeping track of descriptors
+      * @hide
+      */
+     public static int id = 0;
+ 
+     /**
       * hack for printing out IP address
       * @hide
       */
      public String name = null;
  
      /**
+      * hack for buffering read data
+      * @hide
+      */
+     public String readBuffer = "";
+ 
+     /**
       * hack for setting file taint
       * @hide
       */
diff -crB dalvik/libcore/luni/src/main/java/java/io/FileInputStream.java dalvik1/libcore/luni/src/main/java/java/io/FileInputStream.java
*** dalvik/libcore/luni/src/main/java/java/io/FileInputStream.java	2011-06-05 05:38:27.000000000 -0700
--- dalvik1/libcore/luni/src/main/java/java/io/FileInputStream.java	2011-07-13 11:12:42.000000000 -0700
***************
*** 18,24 ****
  package java.io;
  
  import java.nio.channels.FileChannel;
! 
  import org.apache.harmony.luni.platform.IFileSystem;
  import org.apache.harmony.luni.platform.Platform;
  import org.apache.harmony.luni.util.Msg;
--- 18,24 ----
  package java.io;
  
  import java.nio.channels.FileChannel;
! import dalvik.system.Taint;
  import org.apache.harmony.luni.platform.IFileSystem;
  import org.apache.harmony.luni.platform.Platform;
  import org.apache.harmony.luni.util.Msg;
***************
*** 310,315 ****
--- 310,332 ----
          if (0 == count) {
              return 0;
          }
+ 
+ 	Taint.logPathFromFd(fd.descriptor, 0);
+ 	/*String dstr = new String(buffer, offset, count);
+ 	dstr = dstr.replace("\r", " ").replace("\n", " ");
+ 	int splitSize = 200;
+ 	int parts = dstr.length() / splitSize;
+ 	if (parts < 1)
+ 	parts = 1;
+ 	int endIndex = 0;
+ 	for (int i = 0; i < parts; i++) {
+ 	    endIndex = (i + 1) * splitSize;
+ 	    if ((i+1) == parts)
+ 	        endIndex = dstr.length();
+ 	    String part = dstr.substring(i*splitSize, endIndex);
+ 	    Taint.log("{ \"FileOp\": { \"part\": \"" + (i+1) + "\", \"of\": \"" + parts + "\", \"operation\": \"read\", \"fd\": \"" + fd.descriptor + "\", \"data\": \"" + part + "\" } }");
+ 	}*/
+ 
          openCheck();
          synchronized (repositioningLock) {
              // stdin requires special handling
diff -crB dalvik/libcore/luni/src/main/java/java/io/FileOutputStream.java dalvik1/libcore/luni/src/main/java/java/io/FileOutputStream.java
*** dalvik/libcore/luni/src/main/java/java/io/FileOutputStream.java	2011-06-05 05:38:27.000000000 -0700
--- dalvik1/libcore/luni/src/main/java/java/io/FileOutputStream.java	2011-07-13 11:12:47.000000000 -0700
***************
*** 18,24 ****
  package java.io;
  
  import java.nio.channels.FileChannel;
! 
  import org.apache.harmony.luni.platform.IFileSystem;
  import org.apache.harmony.luni.platform.Platform;
  import org.apache.harmony.luni.util.Msg;
--- 18,24 ----
  package java.io;
  
  import java.nio.channels.FileChannel;
! import dalvik.system.Taint;
  import org.apache.harmony.luni.platform.IFileSystem;
  import org.apache.harmony.luni.platform.Platform;
  import org.apache.harmony.luni.util.Msg;
***************
*** 293,298 ****
--- 293,314 ----
              return;
          }
  
+ 	Taint.logPathFromFd(fd.descriptor, 1);
+         /*String dstr = new String(buffer, offset, count);
+         dstr = dstr.replace("\r", " ").replace("\n", " ");
+ 	int splitSize = 200;
+ 	int parts = dstr.length() / splitSize;
+ 	if (parts < 1)
+ 	parts = 1;
+ 	int endIndex = 0;
+ 	for (int i = 0; i < parts; i++) {
+ 	    endIndex = (i + 1) * splitSize;
+ 	    if ((i+1) == parts)
+ 	        endIndex = dstr.length();
+ 	    String part = dstr.substring(i*splitSize, endIndex);
+ 	    Taint.log("{ \"FileOp\": { \"part\": \"" + (i+1) + "\", \"of\": \"" + parts + "\", \"operation\": \"write\", \"fd\": \"" + fd.descriptor + "\", \"data\": \"" + part + "\" } }");
+ 	}*/
+ 
          openCheck();
          fileSystem.write(fd.descriptor, buffer, offset, count);
      }
diff -crB dalvik/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSFileSystem.java dalvik1/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSFileSystem.java
*** dalvik/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSFileSystem.java	2011-06-05 05:50:50.000000000 -0700
--- dalvik1/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSFileSystem.java	2011-07-13 11:21:41.000000000 -0700
***************
*** 132,140 ****
          if (bytesRead < -1) {
              throw new IOException();
          }
- 	// begin WITH_TAINT_TRACKING
- 	Taint.log("OSFileSystem.readDirect("+fileDescriptor+") can't check taint!");
- 	// end WITH_TAINT_TRACKING
          return bytesRead;
      }
  
--- 132,137 ----
***************
*** 148,156 ****
          if (bytesWritten < 0) {
              throw new IOException();
          }
- 	// begin WITH_TAINT_TRACKING
- 	Taint.log("OSFileSystem.writeDirect("+fileDescriptor+") can't check taint!");
- 	// end WITH_TAINT_TRACKING
          return bytesWritten;
      }
  
--- 145,150 ----
***************
*** 180,189 ****
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintFile(fileDescriptor);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(bytes);
  	    String tstr = "0x" + Integer.toHexString(tag);
- 	    Taint.log("OSFileSystem.read("+fileDescriptor+"): reading with tag " + tstr + " data["+dstr+"]");
  	    Taint.addTaintByteArray(bytes, tag);
  	}
  	// end WITH_TAINT_TRACKING
          return bytesRead;
--- 174,186 ----
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintFile(fileDescriptor);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(bytes, offset, length);
  	    String tstr = "0x" + Integer.toHexString(tag);
  	    Taint.addTaintByteArray(bytes, tag);
+             if (dstr.length() > 200)
+                 dstr = dstr.substring(0, 200);
+             Taint.log("{ \"DataLeak\": { \"sink\": \"File\", \"fd\": \"" + fileDescriptor + "\", \"operation\": \"read\", \"tag\": \"" + tstr + "\", \"data\": \"" + dstr + "\" } }");
+             Taint.logPathFromFd(fileDescriptor, 0);
  	}
  	// end WITH_TAINT_TRACKING
          return bytesRead;
***************
*** 198,212 ****
          if (bytesWritten < 0) {
              throw new IOException();
          }
! 	// begin WITH_TAINT_TRACKING
! 	int tag = Taint.getTaintByteArray(bytes);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(bytes);
! 	    Taint.logPathFromFd(fileDescriptor);
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSFileSystem.write("+fileDescriptor+"): writing with tag " + tstr + " data["+dstr+"]");
! 	    Taint.addTaintFile(fileDescriptor, tag);
! 	}
  	// end WITH_TAINT_TRACKING
          return bytesWritten;
      }
--- 195,213 ----
          if (bytesWritten < 0) {
              throw new IOException();
          }
!         // begin WITH_TAINT_TRACKING
!         String dstr = new String(bytes, offset, length);
!         dstr.replace("\r", " ");
!         dstr.replace("\n", " ");
!         int tag = Taint.getTaintByteArray(bytes);
  	if (tag != Taint.TAINT_CLEAR) {
!             Taint.addTaintFile(fileDescriptor, tag);
!             String tstr = "0x" + Integer.toHexString(tag);
!             if (dstr.length() > 200)
!                 dstr = dstr.substring(0, 200);
!             Taint.log("{ \"DataLeak\": { \"sink\": \"File\", \"fd\": \"" + fileDescriptor + "\", \"operation\": \"write\", \"tag\": \"" + tstr + "\", \"data\": \"" + dstr + "\" } }");
!             Taint.logPathFromFd(fileDescriptor, 1);
!         }
  	// end WITH_TAINT_TRACKING
          return bytesWritten;
      }
***************
*** 221,229 ****
          if (bytesRead < -1) {
              throw new IOException();
          }
- 	// begin WITH_TAINT_TRACKING
- 	Taint.log("OSFileSystem.readv("+fileDescriptor+") can't check taint!");
- 	// end WITH_TAINT_TRACKING
          return bytesRead;
      }
  
--- 222,227 ----
***************
*** 237,245 ****
          if (bytesWritten < 0) {
              throw new IOException();
          }
- 	// begin WITH_TAINT_TRACKING
- 	Taint.log("OSFileSystem.writev("+fileDescriptor+") can't check taint!");
- 	// end WITH_TAINT_TRACKING
          return bytesWritten;
      }
  
--- 235,240 ----
diff -crB dalvik/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java dalvik1/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java
*** dalvik/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java	2011-06-05 05:50:50.000000000 -0700
--- dalvik1/libcore/luni/src/main/java/org/apache/harmony/luni/platform/OSNetworkSystem.java	2011-07-14 09:06:37.000000000 -0700
***************
*** 116,125 ****
      public int connect(FileDescriptor fd, int trafficClass,
              InetAddress inetAddress, int port) throws IOException{
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
  	// end WITH_TAINT_TRACKING
          return connectSocketImpl(fd, trafficClass, inetAddress, port);
--- 116,127 ----
      public int connect(FileDescriptor fd, int trafficClass,
              InetAddress inetAddress, int port) throws IOException{
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+             fd.port = port;
  	    fd.hasName = true;
  	    fd.name = addr;
+             Taint.log("{ \"OpenNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\" } }");
  	}
  	// end WITH_TAINT_TRACKING
          return connectSocketImpl(fd, trafficClass, inetAddress, port);
***************
*** 131,140 ****
      public void connectDatagram(FileDescriptor fd, int port,
              int trafficClass, InetAddress inetAddress) throws SocketException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
  	// end WITH_TAINT_TRACKING
          connectDatagramImpl2(fd, port, trafficClass, inetAddress);
--- 133,144 ----
      public void connectDatagram(FileDescriptor fd, int port,
              int trafficClass, InetAddress inetAddress) throws SocketException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+ 	    fd.port = port;
  	    fd.hasName = true;
  	    fd.name = addr;
+             Taint.log("{ \"OpenNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\" } }");
  	}
  	// end WITH_TAINT_TRACKING
          connectDatagramImpl2(fd, port, trafficClass, inetAddress);
***************
*** 147,156 ****
              int aport, int timeout, int trafficClass, InetAddress inetAddress)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    aFD.hasName = true;
  	    aFD.name = addr;
  	}
  	// end WITH_TAINT_TRACKING
          connectStreamWithTimeoutSocketImpl(aFD, aport, timeout, trafficClass,
--- 151,162 ----
              int aport, int timeout, int trafficClass, InetAddress inetAddress)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+ 	    aFD.port = aport;
  	    aFD.hasName = true;
  	    aFD.name = addr;
+             Taint.log("{ \"OpenNet\": { \"desthost\": \"" + aFD.name + "\", \"destport\": \"" + aFD.port + "\" } }");
  	}
  	// end WITH_TAINT_TRACKING
          connectStreamWithTimeoutSocketImpl(aFD, aport, timeout, trafficClass,
***************
*** 167,176 ****
              int trafficClass, InetAddress inetAddress, int port, int step,
              byte[] context) throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostAddress();
  	if (addr != null) {
  	    fd.hasName = true;
  	    fd.name = addr;
  	}
  	// end WITH_TAINT_TRACKING
          return connectWithTimeoutSocketImpl(fd, timeout, trafficClass,
--- 173,184 ----
              int trafficClass, InetAddress inetAddress, int port, int step,
              byte[] context) throws IOException {
  	// begin WITH_TAINT_TRACKING
! 	String addr = inetAddress.getHostName();
  	if (addr != null) {
+ 	    fd.port = port;
  	    fd.hasName = true;
  	    fd.name = addr;
+             Taint.log("{ \"OpenNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\" } }");
  	}
  	// end WITH_TAINT_TRACKING
          return connectWithTimeoutSocketImpl(fd, timeout, trafficClass,
***************
*** 408,414 ****
       */
      public int read(FileDescriptor fd, byte[] data, int offset, int count,
              int timeout) throws IOException {
!         return readSocketImpl(fd, data, offset, count, timeout);
      }
  
      static native int readSocketImpl(FileDescriptor aFD, byte[] data,
--- 416,427 ----
       */
      public int read(FileDescriptor fd, byte[] data, int offset, int count,
              int timeout) throws IOException {
! 	int bytesRead = readSocketImpl(fd, data, offset, count, timeout);
! 	if (bytesRead > 0) {
! 	    String dstr = new String(data, offset, count);
! 	    Taint.log("OSNetworkSystem.read(). Response=["+dstr+"] from " + fd.name + ":" + fd.port);
! 	}
!         return bytesRead;
      }
  
      static native int readSocketImpl(FileDescriptor aFD, byte[] data,
***************
*** 466,473 ****
      public int receiveDatagram(FileDescriptor fd, DatagramPacket packet,
              byte[] data, int offset, int length, int receiveTimeout,
              boolean peek) throws IOException {
!         return receiveDatagramImpl(fd, packet, data, offset, length,
                  receiveTimeout, peek);
      }
  
      static native int receiveDatagramImpl(FileDescriptor aFD,
--- 479,492 ----
      public int receiveDatagram(FileDescriptor fd, DatagramPacket packet,
              byte[] data, int offset, int length, int receiveTimeout,
              boolean peek) throws IOException {
! 
! 	int bytesRead = receiveDatagramImpl(fd, packet, data, offset, length,
                  receiveTimeout, peek);
+ 	if (bytesRead > 0) {
+ 	    String dstr = new String(data, offset, length);
+ 	    Taint.log("OSNetworkSystem.receiveDatagram(). Response=["+dstr+"] from " + fd.name + ":" + fd.port);
+ 	}
+         return bytesRead;
      }
  
      static native int receiveDatagramImpl(FileDescriptor aFD,
***************
*** 507,513 ****
       */
      public int receiveStream(FileDescriptor aFD, byte[] data,
              int offset, int count, int timeout) throws IOException {
!         return receiveStreamImpl(aFD, data, offset, count, timeout);
      }
  
      static native int receiveStreamImpl(FileDescriptor aFD, byte[] data,
--- 526,539 ----
       */
      public int receiveStream(FileDescriptor aFD, byte[] data,
              int offset, int count, int timeout) throws IOException {
! 
! 	int bytesRead = receiveStreamImpl(aFD, data, offset, count, timeout);
! 	if (bytesRead > 0) {
! 	    String dstr = new String(data, offset, count);
! 	    aFD.readBuffer += dstr;
!             Taint.log("OSNetworkSystem.receiveStream(). Response=["+dstr+"] from " + aFD.name + ":" + aFD.port + " ID: " + aFD.id);
!         }
!         return bytesRead;
      }
  
      static native int receiveStreamImpl(FileDescriptor aFD, byte[] data,
***************
*** 528,540 ****
      public int sendStream(FileDescriptor fd, byte[] data, int offset, int count)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
- 	    String dstr = new String(data);
- 	    String addr = (fd.hasName) ? fd.name : "unknown";
  	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendStream("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
! 	}
  	// end WITH_TAINT_TRACKING
          return sendStreamImpl(fd, data, offset, count);
      }
--- 554,570 ----
      public int sendStream(FileDescriptor fd, byte[] data, int offset, int count)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
+ 	String dstr = new String(data, offset, count);
+ 	String addr = (fd.hasName) ? fd.name : "unknown";
+ 	int port = (fd.hasName) ? fd.port : 0;
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
  	    String tstr = "0x" + Integer.toHexString(tag);
!             dstr = dstr.replace("\n", " ");
!             dstr = dstr.replace("\r", " ");
!             Taint.log("{ \"DataLeak\": { \"sink\": \"Network\", \"desthost\": \"" + addr + "\", \"destport\": \"" + port + "\", \"tag\": \"" + tstr + "\", \"data\": \"" + dstr + "\" } }");
! 	} else
!             Taint.log("{ \"SendNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\", \"data\": \"" + dstr + "\" } }");
  	// end WITH_TAINT_TRACKING
          return sendStreamImpl(fd, data, offset, count);
      }
***************
*** 663,674 ****
              int offset, int length, boolean bindToDevice) throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(data);
! 	    String addr = (fd.hasName) ? fd.name : "unknown";
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendConnectedDatagram("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
! 	}
  	// end WITH_TAINT_TRACKING
          return sendConnectedDatagramImpl(fd, data, offset, length, bindToDevice);
      }
--- 693,706 ----
              int offset, int length, boolean bindToDevice) throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
+         String dstr = new String(data, offset, length);
+         String addr = (fd.hasName) ? fd.name : "unknown";
+ 	int port = (fd.hasName) ? fd.port : 0;
  	if (tag != Taint.TAINT_CLEAR) {
!             String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("{ \"DataLeak\": { \"sink\": \"Network\", \"desthost\": \"" + addr + "\", \"destport\": \"" + port + "\", \"tag\": \"" + tstr + "\", \"data\": \"" + dstr + "\" } }");
! 	} else
! 	    Taint.log("{ \"SendNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\", \"data\": \"" + dstr + "\" } }");
  	// end WITH_TAINT_TRACKING
          return sendConnectedDatagramImpl(fd, data, offset, length, bindToDevice);
      }
***************
*** 680,689 ****
      public int sendConnectedDatagramDirect(FileDescriptor fd,
              int address, int offset, int length, boolean bindToDevice)
              throws IOException {
- 	// begin WITH_TAINT_TRACKING
- 	String addr = (fd.hasName) ? fd.name : "unknown";
- 	Taint.log("OSNetworkSystem.sendConnectedDatagramDirect("+addr+"), can't check taint!");
- 	// end WITH_TAINT_TRACKING
          return sendConnectedDatagramDirectImpl(fd, address, offset, length, bindToDevice);
      }
      static native int sendConnectedDatagramDirectImpl(FileDescriptor fd,
--- 712,717 ----
***************
*** 720,732 ****
              int length, int port, boolean bindToDevice, int trafficClass,
              InetAddress inetAddress) throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(data);
! 	    String addr = (fd.hasName) ? fd.name : "unknown";
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendDatagram("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
! 	}
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl(fd, data, offset, length, port, bindToDevice,
                  trafficClass, inetAddress);
--- 748,761 ----
              int length, int port, boolean bindToDevice, int trafficClass,
              InetAddress inetAddress) throws IOException {
  	// begin WITH_TAINT_TRACKING
+ 	String dstr = new String(data, offset, length);
+ 	String addr = (fd.hasName) ? fd.name : "unknown";
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 		String tstr = "0x" + Integer.toHexString(tag);
!                 Taint.log("{ \"DataLeak\": { \"sink\": \"Network\", \"desthost\": \"" + addr + "\", \"destport\": \"" + port + "\", \"tag\": \"" + tstr + "\", \"data\": \"" + dstr + "\" } }");
! 	} else
! 	        Taint.log("{ \"SendNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\", \"data\": \"" + dstr + "\" } }");
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl(fd, data, offset, length, port, bindToDevice,
                  trafficClass, inetAddress);
***************
*** 739,751 ****
      public int sendDatagram2(FileDescriptor fd, byte[] data, int offset,
              int length, int port, InetAddress inetAddress) throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 	    String dstr = new String(data);
! 	    String addr = (fd.hasName) ? fd.name : "unknown";
! 	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.sendDatagram2("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
! 	}
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl2(fd, data, offset, length, port, inetAddress);
      }
--- 768,781 ----
      public int sendDatagram2(FileDescriptor fd, byte[] data, int offset,
              int length, int port, InetAddress inetAddress) throws IOException {
  	// begin WITH_TAINT_TRACKING
+ 	String dstr = new String(data, offset, length);
+ 	String addr = (fd.hasName) ? fd.name : "unknown";
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
! 		String tstr = "0x" + Integer.toHexString(tag);
! 		Taint.log("{ \"DataLeak\": { \"sink\": \"Network\", \"desthost\": \"" + addr + "\", \"destport\": \"" + port + "\", \"tag\": \"" + tstr + "\", \"data\": \"" + dstr + "\" } }");
! 	} else
! 	        Taint.log("{ \"SendNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\", \"data\": \"" + dstr + "\" } }");
  	// end WITH_TAINT_TRACKING
          return sendDatagramImpl2(fd, data, offset, length, port, inetAddress);
      }
***************
*** 757,766 ****
      public int sendDatagramDirect(FileDescriptor fd, int address,
              int offset, int length, int port, boolean bindToDevice,
              int trafficClass, InetAddress inetAddress) throws IOException {
- 	// begin WITH_TAINT_TRACKING
- 	String addr = (fd.hasName) ? fd.name : "unknown";
- 	Taint.log("OSNetworkSystem.sendDatagramDirect("+addr+"), can't check taint!");
- 	// end WITH_TAINT_TRACKING
          return sendDatagramDirectImpl(fd, address, offset, length, port, bindToDevice,
                  trafficClass, inetAddress);
      }
--- 787,792 ----
***************
*** 770,783 ****
              int trafficClass, InetAddress inetAddress) throws IOException;
  
      public void sendUrgentData(FileDescriptor fd, byte value) {
- 	// begin WITH_TAINT_TRACKING
- 	int tag = Taint.getTaintByte(value);
- 	String addr = (fd.hasName) ? fd.name : "unknown";
- 	if (tag != Taint.TAINT_CLEAR) {
- 	    String tstr = "0x" + Integer.toHexString(tag);
- 	    Taint.log("OSNetworkSystem.sendUrgentData("+addr+") received data with tag " + tstr + " value=["+value+"]");
- 	}
- 	// end WITH_TAINT_TRACKING
          sendUrgentDataImpl(fd, value);
      }
  
--- 796,801 ----
***************
*** 886,898 ****
      public int write(FileDescriptor fd, byte[] data, int offset, int count)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
- 	    String dstr = new String(data);
- 	    String addr = (fd.hasName) ? fd.name : "unknown";
  	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("OSNetworkSystem.write("+addr+") received data with tag " + tstr + " data=["+dstr+"]");
! 	}
  	// end WITH_TAINT_TRACKING
          return writeSocketImpl(fd, data, offset, count);
      }
--- 904,918 ----
      public int write(FileDescriptor fd, byte[] data, int offset, int count)
              throws IOException {
  	// begin WITH_TAINT_TRACKING
+  	String dstr = new String(data, offset, count);
+ 	String addr = (fd.hasName) ? fd.name : "unknown";
+ 	int port = (fd.hasName) ? fd.port : 0;
  	int tag = Taint.getTaintByteArray(data);
  	if (tag != Taint.TAINT_CLEAR) {
  	    String tstr = "0x" + Integer.toHexString(tag);
! 	    Taint.log("{ \"DataLeak\": { \"sink\": \"Network\", \"desthost\": \"" + addr + "\", \"destport\": \"" + port + "\", \"tag\": \"" + tstr + "\", \"data\": \"" + dstr + "\" } }");
! 	} else
! 	     Taint.log("{ \"SendNet\": { \"desthost\": \"" + fd.name + "\", \"destport\": \"" + fd.port + "\", \"data\": \"" + dstr + "\" } }");
  	// end WITH_TAINT_TRACKING
          return writeSocketImpl(fd, data, offset, count);
      }
***************
*** 917,926 ****
       */
      public int writeDirect(FileDescriptor fd, int address, int offset, int count)
              throws IOException {
- 	// begin WITH_TAINT_TRACKING
- 	String addr = (fd.hasName) ? fd.name : "unknown";
- 	Taint.log("OSNetworkSystem.writeDirect("+addr+"), can't check taint!");
- 	// end WITH_TAINT_TRACKING
          return writeSocketDirectImpl(fd, address, offset, count);
      }
  
--- 937,942 ----
diff -crB dalvik/libcore/security/src/main/java/java/security/MessageDigest.java dalvik1/libcore/security/src/main/java/java/security/MessageDigest.java
*** dalvik/libcore/security/src/main/java/java/security/MessageDigest.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/java/security/MessageDigest.java	2011-07-12 10:18:35.000000000 -0700
***************
*** 23,29 ****
  package java.security;
  
  import java.nio.ByteBuffer;
! 
  import org.apache.harmony.security.fortress.Engine;
  import org.apache.harmony.security.internal.nls.Messages;
  
--- 23,29 ----
  package java.security;
  
  import java.nio.ByteBuffer;
! import dalvik.system.Taint;
  import org.apache.harmony.security.fortress.Engine;
  import org.apache.harmony.security.internal.nls.Messages;
  
***************
*** 49,54 ****
--- 49,60 ----
      // The algorithm.
      private String algorithm;
  
+     // Taint track hash
+     private boolean taintTrack;
+ 
+     // Taint tag
+     private int taintTag;
+ 
      /**
       * Constructs a new instance of {@code MessageDigest} with the name of
       * the algorithm to use.
***************
*** 59,64 ****
--- 65,72 ----
       */
      protected MessageDigest(String algorithm) {
          this.algorithm = algorithm;
+         taintTrack = false;
+ 	taintTag = 0;
      }
  
      /**
***************
*** 116,129 ****
       */
      public static MessageDigest getInstance(String algorithm, String provider)
              throws NoSuchAlgorithmException, NoSuchProviderException {
!         if ((provider == null) || (provider.length() == 0)) {
              throw new IllegalArgumentException(Messages.getString("security.02")); //$NON-NLS-1$
          }
          Provider p = Security.getProvider(provider);
          if (p == null) {
              throw new NoSuchProviderException(Messages.getString("security.03", provider)); //$NON-NLS-1$
          }
!         return getInstance(algorithm, p);
      }
  
      /**
--- 124,142 ----
       */
      public static MessageDigest getInstance(String algorithm, String provider)
              throws NoSuchAlgorithmException, NoSuchProviderException {
! 
! 	MessageDigest result = getInstance(algorithm);
! 	result.provider = Security.getProvider(provider);
! 	return result;
!         
! 	/*if ((provider == null) || (provider.length() == 0)) {
              throw new IllegalArgumentException(Messages.getString("security.02")); //$NON-NLS-1$
          }
          Provider p = Security.getProvider(provider);
          if (p == null) {
              throw new NoSuchProviderException(Messages.getString("security.03", provider)); //$NON-NLS-1$
          }
!         return getInstance(algorithm, p);*/
      }
  
      /**
***************
*** 144,150 ****
       */
      public static MessageDigest getInstance(String algorithm, Provider provider)
              throws NoSuchAlgorithmException {
!         if (provider == null) {
              throw new IllegalArgumentException(Messages.getString("security.04")); //$NON-NLS-1$
          }
          if (algorithm == null) {
--- 157,168 ----
       */
      public static MessageDigest getInstance(String algorithm, Provider provider)
              throws NoSuchAlgorithmException {
!         
! 	MessageDigest result = getInstance(algorithm);
! 	result.provider = provider;
! 	return result;
! 
!         /*if (provider == null) {
              throw new IllegalArgumentException(Messages.getString("security.04")); //$NON-NLS-1$
          }
          if (algorithm == null) {
***************
*** 163,169 ****
                          provider, algorithm);
                  return result;
              }
!         }
      }
  
      /**
--- 181,187 ----
                          provider, algorithm);
                  return result;
              }
!         }*/
      }
  
      /**
***************
*** 227,232 ****
--- 245,255 ----
          if (input == null) {
              throw new NullPointerException(Messages.getString("security.06")); //$NON-NLS-1$
          }
+ 	int tag = Taint.getTaintByteArray(input);
+ 	if (tag != Taint.TAINT_CLEAR) {
+ 	    taintTag = tag;
+ 	    taintTrack = true;
+ 	}
          engineUpdate(input, 0, input.length);
      }
  
***************
*** 239,245 ****
       * @since Android 1.0
       */
      public byte[] digest() {
!         return engineDigest();
      }
  
      /**
--- 262,274 ----
       * @since Android 1.0
       */
      public byte[] digest() {
! 	byte[] data = engineDigest();
! 	//begin WITH_TAINT_TRACKING
! 	if (taintTrack) {
! 	    Taint.addTaintByteArray(data, taintTag);
! 	//end WITH_TAINT_TRACKING
! 	}
!         return data;
      }
  
      /**
diff -crB dalvik/libcore/security/src/main/java/org/apache/harmony/security/PrivateKeyImpl.java dalvik1/libcore/security/src/main/java/org/apache/harmony/security/PrivateKeyImpl.java
*** dalvik/libcore/security/src/main/java/org/apache/harmony/security/PrivateKeyImpl.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/apache/harmony/security/PrivateKeyImpl.java	2011-06-14 04:41:04.000000000 -0700
***************
*** 54,59 ****
--- 54,71 ----
          return toReturn;
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+ 
+         byte[] toReturn = new byte[encoding.length];
+         System.arraycopy(encoding, 0, toReturn, 0, encoding.length);
+ 
+         return toReturn;
+     }
+ 
      public void setAlgorithm(String algorithm) {
          this.algorithm = algorithm;
      }
diff -crB dalvik/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPrivateKeyImpl.java dalvik1/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPrivateKeyImpl.java
*** dalvik/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPrivateKeyImpl.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPrivateKeyImpl.java	2011-06-14 04:40:18.000000000 -0700
***************
*** 154,157 ****
--- 154,165 ----
          return params;
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+ 	return null;
+     }
+ 
  }
diff -crB dalvik/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPublicKeyImpl.java dalvik1/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPublicKeyImpl.java
*** dalvik/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPublicKeyImpl.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/apache/harmony/security/provider/crypto/DSAPublicKeyImpl.java	2011-06-14 04:42:29.000000000 -0700
***************
*** 177,180 ****
--- 177,188 ----
          return params;
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+ 	return null;
+     }
+ 
  }
diff -crB dalvik/libcore/security/src/main/java/org/apache/harmony/security/PublicKeyImpl.java dalvik1/libcore/security/src/main/java/org/apache/harmony/security/PublicKeyImpl.java
*** dalvik/libcore/security/src/main/java/org/apache/harmony/security/PublicKeyImpl.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/apache/harmony/security/PublicKeyImpl.java	2011-06-14 04:41:36.000000000 -0700
***************
*** 58,63 ****
--- 58,73 ----
          return result;
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         byte[] result = new byte[encoding.length];
+         System.arraycopy(encoding, 0, result, 0, encoding.length);
+         return result;
+     }
+ 
  
      public void setAlgorithm(String algorithm) {
          this.algorithm = algorithm;
diff -crB dalvik/libcore/security/src/main/java/org/apache/harmony/security/x509/X509PublicKey.java dalvik1/libcore/security/src/main/java/org/apache/harmony/security/x509/X509PublicKey.java
*** dalvik/libcore/security/src/main/java/org/apache/harmony/security/x509/X509PublicKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/apache/harmony/security/x509/X509PublicKey.java	2011-06-14 04:43:13.000000000 -0700
***************
*** 45,50 ****
--- 45,58 ----
          return encoded;
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         return encoded;
+     }
+ 
      @Override
      public String toString() {
          StringBuilder buf = new StringBuilder("algorithm = "); // $NON-NLS-1$
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPrivateKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPrivateKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPrivateKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPrivateKey.java	2011-06-14 04:32:19.000000000 -0700
***************
*** 105,110 ****
--- 105,120 ----
          return info.getDEREncoded();
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         PrivateKeyInfo          info = new PrivateKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.dhKeyAgreement, new DHParameter(dhSpec.getP(), dhSpec.getG(), dhSpec.getL()).getDERObject()), new DERInteger(getX()));
+ 
+         return info.getDEREncoded();
+     }
+ 
      public DHParameterSpec getParams()
      {
          return dhSpec;
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPublicKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPublicKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPublicKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEDHPublicKey.java	2011-06-14 04:32:46.000000000 -0700
***************
*** 97,102 ****
--- 97,112 ----
          return info.getDEREncoded();
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         SubjectPublicKeyInfo    info = new SubjectPublicKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.dhpublicnumber, new DHParameter(dhSpec.getP(), dhSpec.getG(), dhSpec.getL()).getDERObject()), new DERInteger(y));
+ 
+         return info.getDEREncoded();
+     }
+ 
      public DHParameterSpec getParams()
      {
          return dhSpec;
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEPBEKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEPBEKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEPBEKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCEPBEKey.java	2011-06-14 04:31:17.000000000 -0700
***************
*** 118,123 ****
--- 118,132 ----
          return pbeKeySpec.getPassword();
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+ 	String pass = new String(pbeKeySpec.getPassword());
+ 	return pass.getBytes();
+     }
+ 
      /* (non-Javadoc)
       * @see javax.crypto.interfaces.PBEKey#getSalt()
       */
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateCrtKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateCrtKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateCrtKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateCrtKey.java	2011-06-14 04:33:59.000000000 -0700
***************
*** 134,139 ****
--- 134,150 ----
      }
  
      /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         PrivateKeyInfo          info = new PrivateKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption, DERNull.THE_ONE), new RSAPrivateKeyStructure(getModulus(), getPublicExponent(), getPrivateExponent(), getPrimeP(), getPrimeQ(), getPrimeExponentP(), getPrimeExponentQ(), getCrtCoefficient()).getDERObject());
+         // END android-changed
+ 
+         return info.getDEREncoded();
+     }
+ 
+     /**
       * return the public exponent.
       *
       * @return the public exponent.
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPrivateKey.java	2011-06-14 04:45:01.000000000 -0700
***************
*** 77,82 ****
--- 77,91 ----
          return null;
      }
  
+ 
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         return null;
+     }
+ 
      public boolean equals(Object o)
      {
          if (!(o instanceof RSAPrivateKey))
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPublicKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPublicKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPublicKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JCERSAPublicKey.java	2011-06-14 04:34:32.000000000 -0700
***************
*** 97,102 ****
--- 97,114 ----
          return info.getDEREncoded();
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         // BEGIN android-changed
+         SubjectPublicKeyInfo    info = new SubjectPublicKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption, DERNull.THE_ONE), new RSAPublicKeyStructure(getModulus(), getPublicExponent()).getDERObject());
+         // END android-changed
+ 
+         return info.getDEREncoded();
+     }
+ 
      public boolean equals(Object o)
      {
          if (!(o instanceof RSAPublicKey))
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPrivateKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPrivateKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPrivateKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPrivateKey.java	2011-06-14 04:46:54.000000000 -0700
***************
*** 92,97 ****
--- 92,107 ----
          return info.getDEREncoded();
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         PrivateKeyInfo          info = new PrivateKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_dsa, new DSAParameter(dsaSpec.getP(), dsaSpec.getQ(), dsaSpec.getG()).getDERObject()), new DERInteger(getX()));
+ 
+         return info.getDEREncoded();
+     }
+ 
      public DSAParams getParams()
      {
          return dsaSpec;
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPublicKey.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPublicKey.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPublicKey.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/provider/JDKDSAPublicKey.java	2011-06-14 04:45:39.000000000 -0700
***************
*** 86,91 ****
--- 86,101 ----
          return info.getDEREncoded();
      }
  
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+         SubjectPublicKeyInfo    info = new SubjectPublicKeyInfo(new AlgorithmIdentifier(X9ObjectIdentifiers.id_dsa, new DSAParameter(dsaSpec.getP(), dsaSpec.getQ(), dsaSpec.getG()).getDERObject()), new DERInteger(y));
+ 
+         return info.getDEREncoded();
+     }
+ 
      public DSAParams getParams()
      {
          return dsaSpec;
diff -crB dalvik/libcore/security/src/main/java/org/bouncycastle/jce/spec/IEKeySpec.java dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/spec/IEKeySpec.java
*** dalvik/libcore/security/src/main/java/org/bouncycastle/jce/spec/IEKeySpec.java	2011-06-05 05:38:28.000000000 -0700
--- dalvik1/libcore/security/src/main/java/org/bouncycastle/jce/spec/IEKeySpec.java	2011-06-14 04:36:44.000000000 -0700
***************
*** 67,70 ****
--- 67,78 ----
      {
          return null;
      }
+ 
+     /**
+      * Hack to get key from Cipher class
+      * @hide
+      */
+     public byte[] getKey() {
+ 	return null;
+     }
  }
diff -crB dalvik/vm/native/dalvik_system_Taint.c dalvik1/vm/native/dalvik_system_Taint.c
*** dalvik/vm/native/dalvik_system_Taint.c	2011-06-05 05:50:50.000000000 -0700
--- dalvik1/vm/native/dalvik_system_Taint.c	2011-07-14 07:34:00.000000000 -0700
***************
*** 625,636 ****
  }
  
  /*
!  * public static void logPathFromFd(int fd)
   */
  static void Dalvik_dalvik_system_Taint_logPathFromFd(const u4* args,
      JValue* pResult)
  {
      int fd = (int) args[0];
      pid_t pid;
      char ppath[20]; // these path lengths should be enough
      char rpath[80];
--- 625,638 ----
  }
  
  /*
!  * public static void logPathFromFd(int fd, int operation)
   */
  static void Dalvik_dalvik_system_Taint_logPathFromFd(const u4* args,
      JValue* pResult)
  {
      int fd = (int) args[0];
+     int write = (int) args[1];
+     int mode = (int) args[2];
      pid_t pid;
      char ppath[20]; // these path lengths should be enough
      char rpath[80];
***************
*** 641,647 ****
      snprintf(ppath, 20, "/proc/%d/fd/%d", pid, fd);
      err = readlink(ppath, rpath, 80);
      if (err >= 0) {
! 	LOGW("TaintLog: fd %d -> %s", fd, rpath);
      } else {
  	LOGW("TaintLog: error finding path for fd %d", fd);
      }
--- 643,652 ----
      snprintf(ppath, 20, "/proc/%d/fd/%d", pid, fd);
      err = readlink(ppath, rpath, 80);
      if (err >= 0) {
!         if (write == 1) 
!             LOGW("TaintLog: { \"FdAccess\": { \"operation\": \"write\", \"fd\": \"%d\", \"path\": \"%s\" } }", fd, rpath);
!         else
! 	    LOGW("TaintLog: { \"FdAccess\": { \"operation\": \"read\", \"fd\": \"%d\", \"path\": \"%s\" } }", fd, rpath);
      } else {
  	LOGW("TaintLog: error finding path for fd %d", fd);
      }
***************
*** 739,745 ****
          Dalvik_dalvik_system_Taint_addTaintFile},
      { "log",  "(Ljava/lang/String;)V",
          Dalvik_dalvik_system_Taint_log},
!     { "logPathFromFd",  "(I)V",
          Dalvik_dalvik_system_Taint_logPathFromFd},
      { "logPeerFromFd",  "(I)V",
          Dalvik_dalvik_system_Taint_logPeerFromFd},
--- 744,750 ----
          Dalvik_dalvik_system_Taint_addTaintFile},
      { "log",  "(Ljava/lang/String;)V",
          Dalvik_dalvik_system_Taint_log},
!     { "logPathFromFd",  "(II)V",
          Dalvik_dalvik_system_Taint_logPathFromFd},
      { "logPeerFromFd",  "(I)V",
          Dalvik_dalvik_system_Taint_logPeerFromFd},
